set nocompatible        " Must be first line

" The next three lines ensure that the ~/.vim/bundle/ system works
filetype on
filetype off
set rtp+=~/.vim/bundle/vundle
set rtp+=/usr/local/opt/fzf
call vundle#rc()

" Load bundles
  " DEPS
  Bundle 'gmarik/vundle'
  Bundle 'MarcWeber/vim-addon-mw-utils'
  Bundle 'tomtom/tlib_vim'

  " General
  Bundle 'altercation/vim-colors-solarized'
  Bundle 'spf13/vim-colors'
  Bundle 'tpope/vim-surround'
  Bundle 'kien/ctrlp.vim'
  Bundle 'Raimondi/delimitMate'
  Bundle 'Lokaltog/vim-powerline'
  "Bundle 'vim-airline/vim-airline-themes'
  "Bundle 'vim-airline/vim-airline'
  Bundle 'stephenmckinney/vim-solarized-powerline'
  Bundle 'godlygeek/csapprox'
  Bundle 'flazz/vim-colorschemes'
  Bundle 'myusuf3/numbers.vim'
  "Bundle 'marijnh/tern_for_vim'

  " General Programming
  Bundle 'scrooloose/syntastic'
  Bundle 'tpope/vim-fugitive'
  Bundle 'scrooloose/nerdcommenter'
  Bundle 'godlygeek/tabular'
  Bundle "pangloss/vim-javascript"
  Bundle "mxw/vim-jsx"
  Bundle 'scrooloose/nerdtree'
  Bundle 'mattn/emmet-vim'
  Bundle 'kchmck/vim-coffee-script'
  Bundle 'klen/python-mode'
  Bundle 'IN3D/vim-raml'

" Clojure
  Bundle 'guns/vim-clojure-static'
  Bundle 'tpope/vim-fireplace'
  Bundle 'vim-scripts/paredit.vim'

" Typescript
  Bundle 'leafgarland/typescript-vim'


" General

  set background=dark         " Assume a dark background
  filetype plugin indent on   " Automatically detect file types.
  syntax on                   " Syntax highlighting
  set mouse=a                 " Automatically enable mouse usage
  set mousehide               " Hide the mouse cursor while typing
  set nobackup
  set nowritebackup
  set noswapfile
  scriptencoding utf-8
  autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif " Always switch to the current file directory 

  set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter')
  set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
  set virtualedit=onemore             " Allow for cursor beyond last character
  set history=1000                    " Store a ton of history (default is 20)
  set spell                           " Spell checking on
  set hidden                          " Allow buffer switching without saving

" }

" Vim UI {
  if filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vim"))
    let g:solarized_termcolors=256
    color solarized                 " Load a colorscheme
  endif

  let g:solarized_termtrans=1
  let g:solarized_contrast="low"
  let g:solarized_visibility="high"

  "let g:hybrid_use_iTerm_colors = 1
  "colorscheme hybrid

  set tabpagemax=15               " Only show 15 tabs
  set showmode                    " Display the current mode

  set cursorline                  " Highlight current line

  highlight clear SignColumn      " SignColumn should match background for
                                  " things like vim-gitgutter

  if has('cmdline_info')
    set ruler                   " Show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
    set showcmd                 " Show partial commands in status line and
                                    " Selected characters/lines in visual mode
  endif

  if has('statusline')
    set laststatus=2

    " Broken down into easily includeable segments
    set statusline=%<%f\                     " Filename
    set statusline+=%w%h%m%r                 " Options
    set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}/%Y]            " Filetype
    set statusline+=\ [%{getcwd()}]          " Current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
  endif

  set backspace=indent,eol,start  " Backspace for dummies
  set linespace=0                 " No extra spaces between rows
  set nu                          " Line numbers on
  set showmatch                   " Show matching brackets/parenthesis
  set incsearch                   " Find as you type search
  set hlsearch                    " Highlight search terms
  set winminheight=0              " Windows can be 0 line high
  set ignorecase                  " Case insensitive search
  set smartcase                   " Case sensitive when uc present
  set wildmenu                    " Show list instead of just completing
  set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
  set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
  set scrolljump=5                " Lines to scroll when cursor leaves screen
  set scrolloff=3                 " Minimum lines to keep above and below cursor
  set foldenable                  " Auto fold code
  set list

  " List chars
  set listchars=""          " Reset the listchars
  set listchars=tab:\ \     " a tab should display as "  ", trailing whitespace as "."
  set listchars+=trail:.    " show trailing spaces as dots
  set listchars+=extends:>  " The character to show in the last column when wrap is
                            " off and the line continues beyond the right of the screen
  set listchars+=precedes:< " The character to show in the last column when wrap is
                            " off and the line continues beyond the right of the screen

  " Fix for tmux background color easing
  set t_ut=

" }

" Formatting {

  set nowrap                      " Wrap long lines
  set autoindent                  " Indent at the same level of the previous line
  set shiftwidth=2                " Use indents of 2 spaces
  set expandtab                   " Tabs are spaces, not tabs
  set tabstop=2                   " An indentation every two columns
  set softtabstop=2               " Let backspace delete indent
  "set matchpairs+=<:>             " Match, to be used with %
  set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks

" }

" Key (re)Mappings {

  let mapleader = ','

  " Easier moving in tabs and windows
  map <C-J> <C-W>j
  map <C-K> <C-W>k
  map <C-L> <C-W>l
  map <C-H> <C-W>h

  " Wrapped lines goes down/up to next row, rather than next line in file.
  nnoremap j gj
  nnoremap k gk

  " The following two lines conflict with moving to top and
  " bottom of the screen
  map <S-H> gT
  map <S-L> gt

  " Stupid shift key fixes
  command! -bang -nargs=* -complete=file E e<bang> <args>
  command! -bang -nargs=* -complete=file W w<bang> <args>
  command! -bang -nargs=* -complete=file Wq wq<bang> <args>
  command! -bang -nargs=* -complete=file WQ wq<bang> <args>
  command! -bang Wa wa<bang>
  command! -bang WA wa<bang>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>
  cmap Tabe tabe

  " Yank from the cursor to the end of the line, to be consistent with C and D.
  nnoremap Y y$

  " Shortcuts
  " Change Working Directory to that of the current file
  cmap cwd lcd %:p:h
  cmap cd. lcd %:p:h

  " Visual shifting (does not exit Visual mode)
  vnoremap < <gv
  vnoremap > >gv

  " Fix home and end keybindings for screen, particularly on mac
  " - for some reason this fixes the arrow keys too. huh.
  map [F $
  imap [F $
  map [H g0
  imap [H g0

  " For when you forget to sudo.. Really Write the file.
  cmap w!! w !sudo tee % >/dev/null

  " Some helpers to edit mode
  " http://vimcasts.org/e/14
  cnoremap %% <C-R>=expand('%:h').'/'<cr>
  map <leader>ew :e %%
  map <leader>es :sp %%
  map <leader>ev :vsp %%
  map <leader>et :tabe %%

  " leader - q closes all buffers in tab
  map <leader>q :tabclose<cr>

  " make open file better for JS dev
  nnoremap gf :call OpenOptimizelyFile(expand('<cfile>'), 'edit')<CR>
  nnoremap gr :call OpenOptimizelyFile(expand('<cfile>'), 'tabe')<CR>
  function! OpenOptimizelyFile(file, cmd)
    let cmd = a:cmd
    let l:found = 0
    let to_try = [
          \simplify(expand('%:p:h') .'/' . a:file . '.js'),
          \simplify(expand('%:p:h') .'/' . a:file . '/index.js'),
          \simplify($OPTIMIZELY . '/src/www/frontend/src/js/' . a:file . '.js'),
          \simplify($OPTIMIZELY . '/src/www/frontend/src/js/' . a:file .  '/index.js'),
          \]

    for f in to_try
      if filereadable(f)
        let l:found = f
        break
      endif
    endfor

    if !empty(l:found)
      execute cmd . ' ' . found
    endif
  endfunction

  " show git diff files in fzf
  "map <leader>gf :call fzf#run({'source': '{git diff --name-only  -- "*.js"; git diff --name-only origin/devel... -- "*.js";} | cat', 'dir': '~/code/optimizely', 'sink': 'tabe', 'options': '--multi --reverse'})<CR>
  map <leader>gf :call fzf#run({'source': 'git diff --name-only  -- "*.js"; git diff --name-only origin/devel... "*.js"', 'dir': '~/code/optimizely', 'sink': 'tabe', 'options': '--multi --reverse'})<CR>
  map <leader>r :source ~/.vimrc<CR>

  " leader - c toggles paste mode
  map <f12> :set invpaste paste?<CR>

  " Easier horizontal scrolling
  map zl zL
  map zh zH

  " Last tab binding
  let g:lasttab = 1
  nmap <c-w>; :exe "tabn ".g:lasttab<cr>
  au TabLeave * let g:lasttab = tabpagenr()

  " Don't move on *
  nnoremap * *<c-o>

  " Keep search matches in the middle of the window.
  nnoremap n nzzzv
  nnoremap N Nzzzv
" }

  " Easy set paste
  nmap \o :set paste!<CR>

"-------------------------------------------------------------------------------
" FileType Settings
"-------------------------------------------------------------------------------
autocmd FileType python setlocal sw=4 ts=4 sts=4 tw=79 expandtab wrap

"-------------------------------------------------------------------------------
" Plugin Settings
"-------------------------------------------------------------------------------
" delimitMat
let delimitMate_quotes = "\" \'"
let delimitMate_smart_quotes = 0

" Powerline
"let g:Powerline_symbols='fancy'
"let g:Powerline_colorscheme='solarized256_light'
"let g:airline_powerline_fonts = 1
"let g:airline#extensions#tabline#enabled = 1
"let g:airline_theme='powerlineish'

" Python-Mode
" Don't autofold code
let g:pymode_folding = 0
let g:pymode_lint_checkers = ['pep8']
let g:pymode_lint_ignore = ['E111']
let g:pymode_lint_signs = 0
let g:pymode_trim_whitespaces = 0
let g:pymode_lint = 0

" CtrlP
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 'r'
nnoremap <silent> <D-t> :CtrlP<CR>
nnoremap <silent> <D-r> :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$',
  \ 'file': '\.exe$\|\.so$\|\.dll$'
\ }
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
  \ },
  \ 'fallback': 'find %s -type f'
\ }

" jsx
let g:jsx_ext_required = 0

" NerdTree shortcut
nnoremap <leader>d :NERDTreeToggle<cr>
let NERDTreeIgnore = ['\.pyc$']
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1



" Tabularize {
  nmap <Leader>a& :Tabularize /&<CR>
  vmap <Leader>a& :Tabularize /&<CR>
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:<CR>
  vmap <Leader>a: :Tabularize /:<CR>
  nmap <Leader>a:: :Tabularize /:\zs<CR>
  vmap <Leader>a:: :Tabularize /:\zs<CR>
  nmap <Leader>a, :Tabularize /,<CR>
  vmap <Leader>a, :Tabularize /,<CR>
  nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  nmap <Leader>a- :Tabularize /=><CR>
  vmap <Leader>a- :Tabularize /=><CR>
" }

" Fugitive {
  nnoremap <silent> <leader>gs :Gstatus<CR>
  nnoremap <silent> <leader>gd :Gdiff<CR>
  nnoremap <silent> <leader>gc :Gcommit<CR>
  nnoremap <silent> <leader>gb :Gblame<CR>
  nnoremap <silent> <leader>gl :Glog<CR>
  nnoremap <silent> <leader>gp :Git push<CR>
"}

" Syntastic {
  let g:syntastic_javascript_checkers = []
  let g:syntastic_html_checkers = []
"}

" zencoding {
  let g:user_emmet_leader_key = '<c-g>'
" }

" Tabline modifications
if has('gui')
  set guioptions-=e
endif
if exists("+showtabline")
  function! MyTabLine()
    let s = ''
    let t = tabpagenr()
    let i = 1
    while i <= tabpagenr('$')
      let buflist = tabpagebuflist(i)
      let winnr = tabpagewinnr(i)
      let s .= '%' . i . 'T'
      let s .= (i == t ? '%1*' : '%2*')
      let s .= ' '
      let s .= i . ':'
      let s .= winnr . '/' . tabpagewinnr(i,'$')
      let s .= ' %*'
      let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
      let bufnr = buflist[winnr - 1]
      let file = bufname(bufnr)
      let buftype = getbufvar(bufnr, 'buftype')
      if buftype == 'nofile'
        if file =~ '\/.'
          let file = substitute(file, '.*\/\ze.', '', '')
        endif
      else
        let file = fnamemodify(file, ':p:t')
      endif
      if file == ''
        let file = '[No Name]'
      endif
      let s .= file
      let i = i + 1
    endwhile
    let s .= '%T%#TabLineFill#%='
    let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
    return s
  endfunction
  set stal=2
  set tabline=%!MyTabLine()
endif

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }



" An action can be a reference to a function that processes selected lines
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
"let g:fzf_layout = { 'down': '~40%' }

" You can set up fzf window using a Vim command (Neovim or latest Vim 8 required)
"let g:fzf_layout = { 'window': 'enew' }
"let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_layout = { 'window': '10split enew' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

